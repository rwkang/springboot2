# 2023.09.25 Conclusion. 여기서는 "라우터" 기능만 하고,
# "local", "dev", "prod", 즉, "local=로컬 컴퓨터=H2 DB", "dev=개발용 서버=MySQL", "prod=운영 서버=Oracle" 이렇게 구분하여,
# .yml 파일을 관리한다.

---
server:
  port: 8088

---
# Live Server
spring:
  devtools:
    livereload:
      enabled: false
    restart:
      enabled: false

# https://oranthy.tistory.com/m/313 날씨 크롤링.
--- # https://home.openweathermap.org/api_keys
openweathermap:
  key: "1fbfbf78015e00c092f0f0fcab9ff2da"

--- # Thymeleaf
spring:
  thymeleaf:
    cache: false # source reload, front-end reload nothing...
    prefix: classpath:templates/
    #    prefix: file:src/main/resources/templates # classpath:templates/
    suffix: .html
    mode: HTML
    check-template-location: true

#--- # H2 DB
#spring:
#  # browser.브라우저에서 호출할 Path 정보: [http://localhost:8088/h2-console] H2 DB 로그인 창이 호출된다.
#  h2:
#    console:
#      enabled: true
#      path: /h2-console # [http://localhost:8088/h2-console] H2 DB 로그인 창이 호출된다.
#  datasource:
#    driver-class-name: org.h2.Driver # [http://localhost:8088/h2-console] H2 DB 로그인 창.Driver Class 값.
#    url: jdbc:h2:~/test # [http://localhost:8088/h2-console] H2 DB 로그인 창.JDBC URL 값.
#    username: sa
#    password:

#--- # mariaDB
#spring:
#  datasource:
#    driver-class-name: org.mariadb.jdbc.Driver
#    url: jdbc:mariadb://localhost:3306/powerapp
#    username: sa
#    password: "*963210z"

#--- # mysql DB
#spring:
#  datasource:
#    url: ENC(FDsnvImt/YaPpCisNLzh8Fx8c6sXl6a0AIp9CLTlIWzj+kh2MUHDYeTELnJyLHg8ObMtGLW7p4zfLnG3Z/Qkm1sKTPkILJPRMIcQzE7Q14qffw6oFFuVsw==)
#    # url: jdbc:mysql://localhost:3306/powerapp?serverTimezone=UTC&characterEncoding=UTF-8
#    driver-class-name: ENC(uUqoMM14aF3YxUrx4mbMMoA1meuXRbNgFAtKLWu37ZJE8alumdZjFw==)
#    # driver-class-name: com.mysql.cj.jdbc.Driver
#    username: ENC(muc9NgC7JAvoW2VMyGJmVQ==)
#    # username: "sa"
#    password: ENC(dJCRCql0gN/hPdLE+CQWtHhRumVQa+3w)
#    # password: "*963210z"

--- # multi datasource
# https://github.com/ohhoonim/springboot3-demo/blob/main/src/main/resources/application-dev.yml
spring:
  datasource:
    hikari:
      #      primary:
      #        driver-class-name: org.mariadb.jdbc.Driver
      #        jdbc-url: jdbc:mariadb://192.168.1.253:3306/localdb
      #        username: matthew
      #        password: ENC(2CTYlgRXmYmlDbJkE9dMV9JQnEAnxNWL)
      #      secondary:
      #        driver-class-name: org.postgresql.Driver
      #        jdbc-url: jdbc:postgresql://192.168.1.253/postgres
      #        username: matthew
      #        password: ENC(2CTYlgRXmYmlDbJkE9dMV9JQnEAnxNWL)

      primary:
        #        url: ENC(FDsnvImt/YaPpCisNLzh8Fx8c6sXl6a0AIp9CLTlIWzj+kh2MUHDYeTELnJyLHg8ObMtGLW7p4zfLnG3Z/Qkm1sKTPkILJPRMIcQzE7Q14qffw6oFFuVsw==)
        # url: jdbc:mysql://localhost:3306/powerapp?serverTimezone=UTC&characterEncoding=UTF-8
        #        driver-class-name: ENC(uUqoMM14aF3YxUrx4mbMMoA1meuXRbNgFAtKLWu37ZJE8alumdZjFw==)
        driver-class-name: com.mysql.cj.jdbc.Driver
#        driver-class-name: ENC(qo5WNlOfrD/DVaSy8VZSYZdY533o1yyoQphQTFzTHSEROf4+XBW/qg==)
        jdbc-url: jdbc:mysql://localhost:3306/powerapp?serverTimezone=UTC&characterEncoding=UTF-8
        username: "sa"
#        username: ENC(m7Jq2tE4yd09i8Yu6pvF2g==)
#        password: ENC(dJCRCql0gN/hPdLE+CQWtHhRumVQa+3w)QoZb/OofzL+dLR/LJJtu9Xh2PDczd/hp
#        password: ENC(QoZb/OofzL+dLR/LJJtu9Xh2PDczd/hp)
        password: "*963210z"

      secondary:
        driver-class-name: oracle.jdbc.OracleDriver
#        driver-class-name: ENC(zAkx/7TKQ3lNEMb4e06koY5GCxZgo+sFRogK4rem2lnsnL+yrj+IwA==)
        jdbc-url: jdbc:oracle:thin:@localhost:1521/xe # 멀티 DB 사용 시에는 반드시 여기로 연결 할 것.
        #        url: jdbc:oracle:thin:@localhost:1521/xe # 오라클 단독 사용 시에는 여기로.
        username: scott
#        username: ENC(ws7diw/HBPxgKEKhBPCmeg==)
        password: tiger
#        password: ENC(YvamKlUb6ATUEuW8D78WtQ==)


# 2024.03.05 Conclusion. 결론적으로 [JPA]를 사용하는 것이 바람직하다. 새로운 프로젝트 작업을 한다면 말이다.
# ∵) 어째도 /entity/ 폴더에 각각의 [table]을 생성하는 코딩을 하기 때문이다.
#    여기 [entity]도 코딩히고, [schema.sql]에서도 코딩하고, 2중으로 할 필요가 없기 때문이다.

# 2024.03.04 Conclusion. [jpa.hibernate.ddl-auto: create] 보다 우선 한다. schema.sql/data-[DATABASE].sql
# ===> 만약 아래 [JPA]로 처리하지 않고, schema.sql 파일로 직접 진행하고자 할 경우에는,
#      아래 JPA 세팅 부분을 주석 처리히고,
#      [Project Folder.springboot2.resources] 폴더에, [sqhema.sql] 파일과 [data-[DATABASE]].sql 파일에서 직접 코딩.

# 2024.03.04 Conclusion. [jpa.hibernate.ddl-auto: create] 보다 우선 한다. schema.sql/data-[DATABASE].sql 파일.
#--- # 여기를 실행하게 되면, 반드시 아래 [JPA] 부분은 모두 주석 처리해야 됨.
#spring:
#  sql:
#    init:
#      mode: always
##      mode: never
#      platform: mysql
#      # [platform: mysql] 이라 함은, 파일명이 [data-mysql.sql]으로 인식하게 한다. 디폴트는 [data.sql] 파일.

--- # JPA: 위 schema.sql/data.sql 참조.
spring:
  jpa:
    #    database-platform: org.hibernate.dialect.MariaDB103Dialect # mariadb
    #    database-platform: org.hibernate.dialect.mariadb53dialect # mariadb : 이건 안 된다네... 난 안 해봄.
    #    database-platform: org.hibernate.dialect.MySQL5Dialect # 4강에서 세팅한 것.
    #    database-platform: org.hibernate.dialect.MySQL8Dialect
    #    database-platform: org.hibernate.dialect.MySQLDialect
    open-in-view: false
    # 아래는 비 추천. 대신에 logging.level ~~ 사용을 추천.
    show_sql: true
    properties:
      hibernate:
        format_sql: true
        #        use_sql_comments: true
        #        query:
        #          in_clause_parameter_padding: true
        # SQL문이 실행될 때 백틱(`)로 테이블과 컬럼을 자동으로 감싸준다.
        globally_quoted_identifier: true

    hibernate:
      # 여기는 운영 시에는 반드시 "Update" 또는 "Valid "로 전환해야 한다.
#      ddl-auto: none
      ddl-auto: create
#      ddl-auto: create-drop
#      ddl-auto: update
    generate-ddl: true

    # 2023.03.04 Added. schema.sql/data.sql 보다, [ddl-auto]가 먼저 실행되도록 설정.
#    defer-datasource-initialization: true

---
# 위 [show_sql: true] 이것은 비 추천하고, 아래 logging 방식을 추천하네...
# https://www.baeldung.com/sql-logging-spring-boot

#logging:
#  level:
#    root: INFO
#    org:
#      hibernate:
#        SQL: DEBUG
#        type:
#          descriptor:
#            sql:
#              BasicBinder: TRACE

#  logging.level.org.hibernate.SQL=debug
#  logging.level.org.hibernate.type.descriptor.sql=trace

#--- Spring Security 진행 시에는 위의 logging 삭제?.

#---
#file:
#  upload:
#    rootpath: /home/upload

# 2023.09.28 Conclusion. 아래는 아직은 이해가 잘 안 되는...
# https://velog.io/@tmdgh0221/%EC%8A%A4%ED%94%84%EB%A7%81-Data-JPA-%EC%A0%95%EB%A6%AC
# 추가로 DB에 날리는 쿼리 파라미터 로그를 남기기 위해 외부 라이브러리를 사용합니다.
# implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.7'
# build.gradle에 의존성을 추가하면 사용할 수 있습니다. 이 외부 라이브러리는 시스템 자원을 사용하므로, 개발 단계에서는 편하게 사용해도 괜찮습니다. 하지만 운영 시스템에 적용하려면 꼭 성능 테스트를 하고 사용하는 것이 좋습니다.

---
mybatis:
  # 아래 classpath = resources 를 의미한다.
  mapper-locations: classpath:mybatis/mapper/mysql/**/**.xml
  type-handlers-package: shop.onekorea.springboot.mapper.typehandler
  # UUID(postId) 값을 찍어 주기 위해서는, mapper 폴더에, typehandler/UuidTypeHandler.java 클래스가 반드시 있어야 한다.
  type-aliases-package: shop.onekorea.springboot.entity
  configuration:
    map-underscore-to-camel-case: true
    default-statement-timeout: 30
    default-fetch-size: 100
    # 한번에 DB에서 들고 올 수 있는 건수: 100건

# 2023.09.25 Conclusion. 아래 "MySql" DB를 연결하게 되면, 위의 "H2" DB 연결이 안 되어,
# "http://localhost:8080/h2-console" 연결할 때, 아래와 같은 에러가 발생한다.
# => Error
# Database "C:/Users?Administrator/test" not found, either pre-create it or allow remote database creation (not recommended in secure environments) [90149-224] 90149/90149 (Help)

---
## MySql DB
#spring:
#  datasource:
#    #    mysql: => ***** 여기 라인이 들어 가면 절대 안 됨: 에러 발생: 들여쓰기는 상관이 없네 *****
#    # 2023.07.21 Conclusion. 여기서 에러나면, cmd/services.msc/MySQL/RB:시작 =====> 구동시켜야 된다.
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://localhost:3306/powerapp?serverTimezone=UTC&characterEncoding=UTF-8
#    username: "sa"
#    password: "*963210z" # 비밀 번호가 [특수 문자]로 시작할 때는 반드시 따옴표로 묶어줘야 한다.
#    # 여기 따옴표도 에러 남: url: jdbc:mysql://localhost:3306/"powerppsc"?serverTimezone=UTC&characterEncoding=UTF-8
#    # 2023.07.21 Conclusion. 여기서 에러나면, cmd/services.msc/MySQL/RB:시작 =====> 구동시켜야 된다.


#--- # 여기 구분자(---)가 있으면, 반드시 처음[spring:]부터 사용해야 한다.
#  # 2023.07.03 oracle setting.
#  # spring.datasource.driver-class-name=oracle.jdbc.OracleDriver => 9 이하 버전 사용.
#  # scott/tiger: hello world 같은 관례.
#spring:
#  datasource:
#    # Oracle DB
##    oracle:
#    driver-class-name: oracle.jdbc.OracleDriver
#    url: jdbc:oracle:thin:@localhost:1521/xe
#    username: scott
#    password: tiger